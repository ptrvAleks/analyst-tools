import json
import xmltodict
import streamlit as st
from json_utils import validate_json, display_json_result
from typing import Any


def detect_format(text: str) -> dict:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞: json, invalid_json, xml –∏–ª–∏ unknown.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON
    json_result = validate_json(text)
    if json_result["ok"]:
        return {"format": "json"}

    if text.strip().startswith("{") or text.strip().startswith("["):
        return {
            "format": "invalid_json",
            "error": json_result["error"]
        }

    # –£–¥–∞–ª—è–µ–º XML-–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
    cleaned_text = "\n".join(
        line for line in text.splitlines()
        if not line.strip().startswith("<?xml")
    )

    try:
        xmltodict.parse(cleaned_text)
        return {"format": "xml"}
    except Exception:
        return {"format": "unknown"}

def convert_json_to_xml(json_str: str, wrap_root: bool = True, item_name: str = "item") -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON –≤ XML, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ø–∏—Å–∫–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
    obj = json.loads(json_str)

    if not item_name:
        item_name = "item"

    # –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å–ø–∏—Å–æ–∫, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º
    if isinstance(obj, list):
        obj = {item_name: obj}

    if wrap_root:
        obj = {"root": obj}

    xml_str = xmltodict.unparse(obj, pretty=True)

    if not wrap_root:
        # —É–¥–∞–ª—è–µ–º <root> –∏ </root>
        lines = xml_str.strip().splitlines()
        xml_str = "\n".join(lines[1:-1])

    return xml_str

def _postprocess(value: Any) -> Any:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫–∏ '' ‚Üí None, 'true'/'false' ‚Üí bool."""
    if isinstance(value, dict):
        return {k: _postprocess(v) for k, v in value.items()}
    if isinstance(value, list):
        return [_postprocess(v) for v in value]
    if value == "":
        return None
    if isinstance(value, str) and value.lower() in ("true", "false"):
        return value.lower() == "true"
    return value

def convert_xml_to_json(xml_str: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç XML –≤–∏–¥–∞ <root><item>‚Ä¶</item>‚Ä¶</root> ‚Üí JSON‚Äë–º–∞—Å—Å–∏–≤.
    ‚Ä¢ –£–¥–∞–ª—è–µ—Ç XML‚Äë–¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é.
    ‚Ä¢ –í—ã–∫–∏–¥—ã–≤–∞–µ—Ç –æ–±—ë—Ä—Ç–∫–∏ root/item.
    ‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç "" ‚Üí null, "true"/"false" ‚Üí bool.
    """
    # 1. —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É <?xml ‚Ä¶?>
    cleaned = "\n".join(
        line for line in xml_str.splitlines()
        if not line.strip().startswith("<?xml")
    )

    # 2. –ø–∞—Ä—Å–∏–º
    parsed = xmltodict.parse(cleaned)

    # 3. –¥–æ—Å—Ç–∞—ë–º —Å–ø–∏—Å–æ–∫ <item>
    items = parsed.get("root", {}).get("item", [])

    # xmltodict –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict, –µ—Å–ª–∏ item –æ–¥–∏–Ω ‚Äï –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫
    if not isinstance(items, list):
        items = [items]

    # 4. –ø–æ—Å—Ç‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤
    items = _postprocess(items)

    # 5. JSON‚Äë—Å—Ç—Ä–æ–∫–∞
    return json.dumps(items, indent=2, ensure_ascii=False)

def run_converter():
    st.header("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä JSON ‚áÑ XML")

    input_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ JSON –∏–ª–∏ XML:", height=300)

    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    wrap = st.checkbox("–û–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ `<root>` (–¥–ª—è XML)", value=True)
    item_name = st.text_input("–ò–º—è —É–∑–ª–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ JSON ‚Üí XML", value="item")

    if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        if not input_text.strip():
            st.warning("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ.")
            return

        fmt = detect_format(input_text)
        try:
            if fmt["format"] == "json":
                result = convert_json_to_xml(input_text, wrap_root=wrap, item_name=item_name)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (XML):")
                st.code(result, language="xml")
            elif fmt["format"] == "invalid_json":
                display_json_result({"ok": False, "error": fmt["error"]}, input_text)
            elif fmt["format"] == "xml":
                result_json = convert_xml_to_json(input_text)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (JSON):")
                st.code(result_json, language="json")
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –∏–ª–∏ XML.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")