import json
import streamlit as st

def count_root_objects(json_text: str) -> int:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É json_text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ—Ä–Ω–µ.
    –ï—Å–ª–∏ –∫–æ—Ä–µ–Ω—å ‚Äî –Ω–µ –º–∞—Å—Å–∏–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1.
    –ë—Ä–æ—Å–∞–µ—Ç json.JSONDecodeError –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    data = json.loads(json_text)
    return len(data) if isinstance(data, list) else 1

def validate_json(json_text: str) -> dict:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É JSON.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      {'ok': True, 'data': <—Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ>, 'count': <–æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ—Ä–Ω–µ>} ‚Äî –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
      {'ok': False, 'error': <–æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏>} ‚Äî –ø—Ä–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º JSON
    """
    if not json_text.strip():
        return {"ok": False, "error": "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON."}

    try:
        data = json.loads(json_text)
        count = count_root_objects(json_text)
        return {"ok": True, "data": data, "count": count}
    except json.JSONDecodeError as e:
        return {
            "ok": False,
            "error": f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e.msg} (—Å—Ç—Ä–æ–∫–∞ {e.lineno}, –∫–æ–ª–æ–Ω–∫–∞ {e.colno})"
        }

def run_json_tool():
    st.header("JSON-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")

    json_text = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ JSON‚Äì—Ç–µ–∫—Å—Ç —Å—é–¥–∞:", height=200)

    col1, col2 = st.columns(2)
    with col1:
        check_btn = st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON")
    with col2:
        clear_btn = st.button("–û—á–∏—Å—Ç–∏—Ç—å")

    if clear_btn:
        st.rerun()

    if check_btn:
        result = validate_json(json_text)

        if result["ok"]:
            parsed_json = result["data"]
            count = count_root_objects(json_text)

            st.success("‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            st.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {count}")

            st.subheader("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:")
            st.json(parsed_json)
        else:
            st.error("‚ùå –û—à–∏–±–∫–∞ –≤ JSON:")
            st.code(result["error"], language="plaintext")

            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏
            import re
            match = re.search(r'—Å—Ç—Ä–æ–∫–∞ (\d+)', result["error"])
            if match:
                line_num = int(match.group(1))
                st.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ: {line_num}")

                lines = json_text.splitlines()
                start = max(0, line_num - 5)
                end = min(len(lines), line_num + 4)

                snippet = []
                for i in range(start, end):
                    line_prefix = f"{i+1:>4}: "
                    if i + 1 == line_num:
                        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–æ–π
                        snippet.append(f"{line_prefix}üëâ {lines[i]}")
                    else:
                        snippet.append(f"{line_prefix}   {lines[i]}")

                st.subheader("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (¬±4 —Å—Ç—Ä–æ–∫–∏):")
                st.code("\n".join(snippet), language="json")
            else:
                st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π.")