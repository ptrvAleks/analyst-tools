import streamlit as st
from logic.xml_json_converter import detect_format, convert_json_to_xml, convert_xml_to_json
from ui.json_ui import display_json_result
from database.db_methods import get_conversions, save_conversion
from app import get_uid_cookie


def run_converter():
    get_uid_cookie()
    st.header("üîÅ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä JSON ‚áÑ XML")

    uid = st.session_state.get("uid")

    input_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ JSON –∏–ª–∏ XML:", height=300)

    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    item_name = st.text_input("–ò–º—è —É–∑–ª–∞ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ JSON ‚Üí XML", value="item")

    if st.button("–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        if not input_text.strip():
            st.warning("–ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ–µ.")
            return

        fmt = detect_format(input_text)
        try:
            if fmt["format"] == "json":
                converted = convert_json_to_xml(input_text, item_name=item_name)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (XML):")
                st.code(converted, language="xml")
                save_conversion(uid, converted)
            elif fmt["format"] == "invalid_json":
                display_json_result({"ok": False, "error": fmt["error"]}, input_text)
            elif fmt["format"] == "xml":
                converted = convert_xml_to_json(input_text)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (JSON):")
                st.code(converted, language="json")
                save_conversion(uid, converted)
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –∏–ª–∏ XML.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
    st.write("UID –¥–ª—è list_widget:", uid)

    list_widget()



def list_widget():
    uid = cookies.get("uid")
    if not uid:
        st.warning("UID –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        return
    if "uid" in st.session_state:
        conversions = get_conversions(st.session_state.uid)
        st.write("DEBUG: conversions", conversions)

        st.subheader("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

        if not conversions:
            st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π")
        else:
            for item in conversions:
                with st.expander(
                        f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç {item['timestamp'].strftime('%Y/%m/%d %H:%M:%S') if item['timestamp'] else '-'}"):
                    st.code(item["converted"])
