# ui/users_page.py
import streamlit as st
from logic.user import User
from database.user_service import UserService

service = UserService()


def run_user_list():
    current_user: User | None = st.session_state.get("user")
    if current_user.role != "admin":
        st.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        st.stop()

    def load_users():
        return service.get_all_users()

    if "edit_user" not in st.session_state:
        st.session_state["edit_user"] = None

    def user_card(user: User, idx: int):
        with st.container():
            edit_key = f"edit_{idx}_{user.uid}"
            html = f"""
            <div style="
                border: 2px solid #ddd;
                border-radius: 10px;
                padding: 15px;
                margin: 10px 0;
                box-shadow: 2px 2px 10px rgba(0,0,0,0.05);
            ">
                <h4>{user.first_name or "‚Äî"}</h4>
                <p><strong>Email:</strong> {user.email}</p>
                <p><strong>Role:</strong> {user.role or "‚Äî"}</p>
            </div>
            """
            st.markdown(html, unsafe_allow_html=True)

            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=edit_key):
                st.session_state["edit_user"] = user
                st.rerun()

    def edit_user_form(user: User):
        st.markdown("## ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        if st.button("‚Üê –ù–∞–∑–∞–¥"):
            st.session_state["edit_user"] = None
            st.rerun()

        new_name = st.text_input("–ò–º—è", value=user.first_name or "")
        new_role = st.selectbox("–†–æ–ª—å", ["admin", "user"], index=["admin", "user"].index(user.role or "user"))
        new_email = st.text_input("–ü–æ—á—Ç–∞", value=user.email or "")

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            service.set_user_first_name(user, new_name)
            service.set_user_role(user, new_role)
            if new_email and new_email != user.email:
                service.update_user_email(user, new_email)
            st.success("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            st.cache_data.clear()
            st.session_state["edit_user"] = None
            st.rerun()

        if st.button("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firebase Auth
            deleted_auth = service.delete_user(user)
            # –£–¥–∞–ª—è–µ–º Firestore –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω)
            deleted_data = service.delete_user_data(current_user, user.uid)

            if deleted_auth and deleted_data:
                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
                st.cache_data.clear()
                st.session_state["edit_user"] = None
                st.rerun()
            else:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    # ---------- UI ----------
    st.title("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    users = load_users()
    if not users:
        st.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.session_state["edit_user"]:
        edit_user_form(st.session_state["edit_user"])
        return  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.subheader("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    cols_per_row = 3
    for i in range(0, len(users), cols_per_row):
        cols = st.columns(cols_per_row)
        chunk = users[i:i + cols_per_row]
        for j, (col, u) in enumerate(zip(cols, chunk)):
            index = i + j
            with col:
                user_card(u, index)