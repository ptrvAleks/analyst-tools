import streamlit as st
import json
import uuid
from pathlib import Path
from io import BytesIO
from features.user.template_builder.document_routes import document_routes

TEMPLATES_DIR = Path(__file__).parent / "templates"

def load_template(key: str) -> str:
    template_path = TEMPLATES_DIR / f"{key}.json"
    with open(template_path, "r", encoding="utf-8") as f:
        return f.read()


def render_template(template: str, values: dict):
    for key, val in values.items():
        if val == "null":  # —Å—Ç—Ä–æ–∫–∞ "null" ‚Äî –∫–∞–∫ –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ None
            template = template.replace(f'"${{{key}}}"', "null")  # –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
            template = template.replace(f"${{{key}}}", "null")    # –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        elif isinstance(val, (dict, list)):
            json_val = json.dumps(val, ensure_ascii=False)
            template = template.replace(f"${{{key}}}", json_val)
        else:
            template = template.replace(f"${{{key}}}", str(val))
    return json.loads(template)

def run_liga_doc_create():

    # –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    doc_types = list(document_routes.keys())
    selected_doc_type = st.selectbox("–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", doc_types)

    # –í—ã–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
    routes = document_routes.get(selected_doc_type, {})
    if not routes:
        st.warning("–î–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤")
        return

    route_names = list(routes.keys())
    selected_route = st.selectbox("–ú–∞—Ä—à—Ä—É—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è", route_names)
    selected_users = routes[selected_route]

    try:
        with st.expander("–®–∞–±–ª–æ–Ω"):
            template = load_template("universal")
            # –ü–æ–ª—É—á–∞–µ–º users –∏–∑ —Å–ª–æ–≤–∞—Ä—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ç–æ –µ—Å—Ç—å —à–∞–±–ª–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            default_users = routes[selected_route]
            users_json = json.dumps(default_users, ensure_ascii=False)

            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω (—Ç–æ–ª—å–∫–æ users)
            template_with_users = template.replace("${users}", users_json)

            template_with_users = template_with_users.replace("${type}", selected_doc_type)

            st.subheader("üìÑ –®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º users –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞")
            st.code(template_with_users, language="json")
    except FileNotFoundError:
        st.error("–ù–µ –Ω–∞–π–¥–µ–Ω universal.json —à–∞–±–ª–æ–Ω.")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    user_inputs = {
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    "requestUuid": str(uuid.uuid4()),
    "number": "1",
    "externalId": str(uuid.uuid4()),
    "type": selected_doc_type,
    }


    # üîß –†—É—á–Ω–æ–π –≤–≤–æ–¥ legalEntityId –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    st.subheader("üë§ –í–≤–µ–¥–∏—Ç–µ ext_1c_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    user_inputs_list = []
    for user in selected_users:
        user_type = user["type"]
        input_id = st.text_input(f"{user_type}", key=f"{selected_route}_{user_type}")
        user_inputs_list.append({
            "type": user_type,
            "legalEntityId": input_id
        })
    user_inputs["users"] = json.dumps(user_inputs_list, ensure_ascii=False)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    st.subheader("üìù –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    user_inputs["name"] = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    user_inputs["legalEntityExternalId"] = st.text_input("–Æ—Ä –ª–∏—Ü–æ")
    user_inputs["fileId"] = st.text_input("fileId", "")
    user_inputs["date"] = st.date_input("date").strftime("%Y-%m-%d")
    # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ –≤ —Å–µ—Å—Å–∏–∏
    if "link_count" not in st.session_state:
        st.session_state.link_count = 1

    # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"):
            st.session_state.link_count += 1
    with col2:
        if st.button("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é") and st.session_state.link_count > 0:
            st.session_state.link_count -= 1

    # –í–≤–æ–¥ —Å—Å—ã–ª–æ–∫
    links = []
    for i in range(st.session_state.link_count):
        st.markdown(f"**–°—Å—ã–ª–∫–∞ #{i + 1}**")
        title = st.text_input(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ #{i + 1}", key=f"link_title_{i}")
        link = st.text_input(f"URL —Å—Å—ã–ª–∫–∏ #{i + 1}", key=f"link_url_{i}")
        if title and link:
            links.append({"title": title, "link": link})


    if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON"):
        try:
            if links:
                user_inputs["links"] = json.dumps(links, ensure_ascii=False)
            else:
                user_inputs["links"] = "null"  # —à–∞–±–ª–æ–Ω –ø—Ä–∏–º–µ—Ç null
            result = render_template(template, user_inputs)
            st.success("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:")
            st.json(result)

            buffer = BytesIO()
            buffer.write(json.dumps(result, indent=2, ensure_ascii=False).encode("utf-8"))
            buffer.seek(0)

            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                data=buffer,
                file_name=f"{selected_doc_type}_request.json",
                mime="application/json"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")