import streamlit as st
import json
from features.user.template_builder.template_builder import extract_variables, render_template
from features.user.template_builder.liga_doc_document_create import run_liga_doc_create
from io import BytesIO

def run_template_builder():
    st.title("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")

    # üîΩ –í—ã–±–æ—Ä –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    logic_choice = st.selectbox("‚öôÔ∏è –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON", ["–î–æ–∫—É–º–µ–Ω—Ç—ã", "–°–≤–æ–π —à–∞–±–ª–æ–Ω"])

    if logic_choice == "–î–æ–∫—É–º–µ–Ω—Ç—ã":
        run_liga_doc_create()
        return  # ‚õîÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è "–°–≤–æ–π —à–∞–±–ª–æ–Ω"
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω JSON —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–∏–¥–∞ `${variableName}`")
    uploaded = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —à–∞–±–ª–æ–Ω", type="json")

    if uploaded:
        try:
            raw_template = uploaded.read().decode("utf-8")
            st.code(raw_template, language="json")
            variables = extract_variables(raw_template)

            st.subheader("üîß –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            user_inputs = {}
            for var in variables:
                user_inputs[var] = st.text_input(f"{var}", placeholder=f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {var}")

            if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON"):
                try:
                    result = render_template(raw_template, user_inputs)

                    st.success("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:")
                    st.json(result)

                    buffer = BytesIO()
                    buffer.write(json.dumps(result, indent=2, ensure_ascii=False).encode("utf-8"))
                    buffer.seek(0)

                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                        data=buffer,
                        file_name="result.json",
                        mime="application/json"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")