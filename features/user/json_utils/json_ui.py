import streamlit as st
import re
from features.user.json_utils.json_utils import validate_json
from shared.session.cookie_session import CookieSessionManager

def display_json_result(result: dict, original_text: str):
    if result["ok"]:
        st.success("‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        st.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {result['count']}")
        with st.expander("–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON"):
            st.json(result["data"])
    else:
        st.error("–û—à–∏–±–∫–∞ –≤ JSON:")
        st.code(result["error"], language="plaintext")

        match = re.search(r'—Å—Ç—Ä–æ–∫–∞ (\d+)', result["error"])
        if match:
            line_num = int(match.group(1))

            lines = original_text.splitlines()
            start = max(0, line_num - 5)
            end = min(len(lines), line_num + 4)

            snippet = []
            for i in range(start, end):
                line_prefix = f"{i+1:>4}: "
                if i + 1 == line_num:
                    snippet.append(f"{line_prefix}üëâ {lines[i]}")
                else:
                    snippet.append(f"{line_prefix}   {lines[i]}")
            st.subheader("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (¬±4 —Å—Ç—Ä–æ–∫–∏):")
            st.code("\n".join(snippet), language="json")
        else:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π.")


def run_json_tool(cookie_manager):
    st.header("JSON-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –ø–µ—Ä–µ–¥ –≤–∏–¥–∂–µ—Ç–æ–º
    if "json_text" not in st.session_state:
        st.session_state.json_text = cookie_manager.get_value("json_text") or ""

    if "clear_uploaded" not in st.session_state:
        st.session_state.clear_uploaded = False

    # uploader: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if not st.session_state.clear_uploaded:
        st.session_state.uploaded_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON", type="json")
        if st.session_state.uploaded_file:
            data = st.session_state.uploaded_file.getvalue().decode("utf-8")
            st.session_state.json_text = data
            cookie_manager.set_value("json_text", data)
    else:
        # –ï—Å–ª–∏ —Å–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è uploader
        def reset_uploader():
            st.session_state.clear_uploaded = False

        st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", on_click=reset_uploader)


    # --- callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ---
    def clear_text():
        st.session_state.json_text = ""
        cookie_manager.set_value("json_text", "")
        st.session_state.clear_uploaded = True  # —Å–∫—Ä—ã–≤–∞–µ–º uploader –≤—Ä–µ–º–µ–Ω–Ω–æ

    def check_json():
        data = st.session_state.json_text
        st.session_state.result = validate_json(data)
        display_json_result(st.session_state.result, data)


    # --- —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ ---
    st.text_area(
        "–í—Å—Ç–∞–≤—å—Ç–µ JSON‚Äì—Ç–µ–∫—Å—Ç —Å—é–¥–∞:",
        height=200,
        key="json_text"
    )

    col1, col2 = st.columns(2)
    with col1:
        st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", key="check_btn")
    with col2:
        st.button("–û—á–∏—Å—Ç–∏—Ç—å", on_click=clear_text, key="clear_btn")

    if st.session_state.check_btn:
        check_json()

# –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞
if __name__ == "__main__":
    run_json_tool()