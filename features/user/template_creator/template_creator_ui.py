# ui.py
import streamlit as st
import json
from features.user.template_builder.template_builder import json_to_template
from io import BytesIO
from logic.user_service import UserService
from database.user_dto import UserDto

service = UserService()

def recursive_field_editor(data, path=""):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∏—Å—É–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç.
    """
    if isinstance(data, dict):
        result = {}
        for key, value in data.items():
            result[key] = recursive_field_editor(value, path + "." + key if path else key)
        return result
    elif isinstance(data, list):
        result = []
        for i, item in enumerate(data):
            result.append(recursive_field_editor(item, f"{path}[{i}]"))
        return result
    else:
        return st.text_input(f"{path}", value=str(data))

def run_template_creator():
    current_user: UserDto | None = st.session_state.get("user")
    if current_user is None:
        st.error("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
        st.stop()
        
    
    st.title("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ JSON")
    st.markdown("–í—Å—Ç–∞–≤—å—Ç–µ JSON, –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—Å—è –≤ —à–∞–±–ª–æ–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ `${–∫–ª—é—á}`.\n"
                "–í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ `${–∏–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π}`.")

    json_input = st.text_area("üìù –í—Å—Ç–∞–≤—å—Ç–µ JSON", height=300, placeholder='{"name": "–ò–≤–∞–Ω", "age": 30}')
    if json_input:
        try:
            parsed = json.loads(json_input)
            template = json_to_template(parsed)
            st.success("‚úÖ JSON –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —à–∞–±–ª–æ–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")
            modified = recursive_field_editor(template)

            if st.button("üíæ –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"):
                buffer = BytesIO()
                buffer.write(json.dumps(modified, indent=2, ensure_ascii=False).encode("utf-8"))
                buffer.seek(0)
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω JSON",
                    data=buffer,
                    file_name="template.json",
                    mime="application/json"
                )

            service.save_template(current_user, json.dumps(modified, ensure_ascii=False, indent=2))
            
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    list_widget()

            
def list_widget():
    current_user: UserDto | None = st.session_state.get("user")

    templates = service.get_templates(current_user)


    st.subheader("–®–∞–±–ª–æ–Ω—ã")

    if not templates:
        st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
    else:
        for idx, item in enumerate(templates):
            with st.expander(f"–®–∞–±–ª–æ–Ω –æ—Ç {item['timestamp'].strftime('%d.%m.%Y %H:%M:%S') if item['timestamp'] else '-'}"):
                st.code(item["template"])
                document_id = item["id"]

               # if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"delete_{document_id}_{idx}"):
                #    service.delete_conversion(current_user, document_id)
                #    st.success("–£–¥–∞–ª–µ–Ω–æ")
                #    st.rerun()